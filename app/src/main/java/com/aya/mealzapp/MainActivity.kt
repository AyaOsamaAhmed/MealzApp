package com.aya.mealzapp

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.viewModels
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.lifecycle.lifecycleScope
import coil.compose.AsyncImage
import com.aya.domain.entity.Category
import com.aya.mealzapp.ui.theme.MealzAppTheme
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.launch

import androidx.compose.ui.unit.dp
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape

@AndroidEntryPoint
class MainActivity : ComponentActivity() {

    private val viewModel: MainViewModel by viewModels()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        getData()
        }


        fun getData() {
            lifecycleScope.launch {
                viewModel.listCategory.collect{
                    if (it != null) {

                        setContent {
                            MealzAppTheme {
                                ScreenList(it)
                            }
                        }
                    }
                    Log.d("MainActivity", "getData: $it")
                }
            }
        }
}

//  Surface() { //color = MealzAppTheme.colors.background
// Use LazyRow when making horizontal lists

// Preview without running the app
//@Preview(showBackground = true, showSystemUi = true)
@Composable
fun ScreenList(
    list: List<Category>
) {
    LazyColumn(modifier = Modifier.padding(top = 40.dp  , bottom = 20.dp , start = 15.dp , end = 15.dp)) {
        items(list) { data ->
            ListItem(data)
        }
    }
}
// The UI for each list item can be generated by a reusable composable

@Composable
fun ListItem(item: Category) {
    Surface ( modifier = Modifier
        .padding(top = 15.dp)
        .border(
        width = 2.dp,
        color = Color.LightGray,
        shape = RoundedCornerShape(16.dp) // الكيرف هنا
            )
        .fillMaxWidth()){


        Row {
            LoadNetworkImage(item.strCategoryThumb)
            Column (modifier = Modifier.padding(start = 10.dp)){
                Text(text = item.strCategory)
                Text(text = item.strCategoryDescription , Modifier.padding(top = 5.dp) , maxLines = 3)
            }

            Row {  }
        }
    }
}

@Composable
fun LoadNetworkImage(url : String) {
    AsyncImage(
        model = url, // رابط الصورة
        contentDescription = "Sample Image",
        modifier = Modifier.size(150.dp),
        contentScale = ContentScale.Crop // تتحكم في طريقة عرض الصورة
    )
}

/*
@Composable
fun MyCallbackList(
    modifier: Modifier = Modifier,
    callbackListDataItem: List<CallbackListDataItem>,
    itemClickedCallback: (callbackListDataItem: CallbackListDataItem) -> Unit,
) {
    LazyColumn(modifier = modifier) {
        items(callbackListDataItem) { item ->
            CallbackListItem(
                callbackListDataItem = item,
                itemClickedCallback = itemClickedCallback
            )
        }
    }
}

@Composable
fun CallbackListItem(
    callbackListDataItem: CallbackListDataItem,
    itemClickedCallback: (callbackListDataItem: CallbackListDataItem) -> Unit,
) {
    Button(onClick = { itemClickedCallback(callbackListDataItem) }) {
        Text(text = callbackListDataItem.text)
    }
}

 */