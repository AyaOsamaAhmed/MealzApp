package com.aya.mealzapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.viewModels
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.lifecycle.lifecycleScope
import com.aya.domain.entity.Category
import com.aya.mealzapp.ui.theme.MealzAppTheme
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {

    private val viewModel: MainViewModel by viewModels()
     var listCategory : List<Category>? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        initData()

        setContent {
            MealzAppTheme {
               /* Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    Greeting(
                        name = "Android",
                        modifier = Modifier.padding(innerPadding)
                    )
                }*/

                    val countries = listOf(
                        Category("USA", "Washington D.C.","",""),
                        Category("France", "null","",""),
                        Category("Japan", "Tokyo","",""),
                        Category("Brazil", "null","","")
                    )
                    ScreenList(countries)


            }
        }
    }

    fun initData(){
        viewModel.getMeals()
        lifecycleScope.launch {
            viewModel.category.collect{
                listCategory =  it?.categories
            }
        }
    }


}

//  Surface() { //color = MealzAppTheme.colors.background
// Use LazyRow when making horizontal lists

@Composable
fun ScreenList(
    list: List<Category>
) {
    LazyColumn(modifier = Modifier.fillMaxSize()) {
        items(list) { data ->
            ListItem(data)
        }
    }
}
// The UI for each list item can be generated by a reusable composable
@Composable
fun ListItem(item: Category) {
    Text(text = item.strCategory)
}

/*
@Composable
fun MyCallbackList(
    modifier: Modifier = Modifier,
    callbackListDataItem: List<CallbackListDataItem>,
    itemClickedCallback: (callbackListDataItem: CallbackListDataItem) -> Unit,
) {
    LazyColumn(modifier = modifier) {
        items(callbackListDataItem) { item ->
            CallbackListItem(
                callbackListDataItem = item,
                itemClickedCallback = itemClickedCallback
            )
        }
    }
}

@Composable
fun CallbackListItem(
    callbackListDataItem: CallbackListDataItem,
    itemClickedCallback: (callbackListDataItem: CallbackListDataItem) -> Unit,
) {
    Button(onClick = { itemClickedCallback(callbackListDataItem) }) {
        Text(text = callbackListDataItem.text)
    }
}

 */